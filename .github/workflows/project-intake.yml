name: Org Project Intake
on:
  workflow_call:
    inputs:
      org_login: {type: string, required: false}
      owner_login: {type: string, required: true}
      owner_kind: {type: string, required: true}
      project_number: {type: string, required: true}
    secrets:
      GH_TOKEN_FOR_PROJECTS: {required: true}   # fine-grained PAT or GitHub App token
jobs:
  run:
    permissions: {}  # use the passed token, not GITHUB_TOKEN
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-python@v5
        with: { python-version: "3.12" }
      - run: python -m pip install --upgrade pip requests
      - name: Add issue to Project + compute RICE
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN_FOR_PROJECTS }}
          ORG_LOGIN: ${{ inputs.org_login }}
          OWNER_LOGIN: ${{ inputs.owner_login }}
          OWNER_KIND: ${{ inputs.owner_kind }} # user or organization
          PROJECT_NUMBER: ${{ inputs.project_number }}
          ISSUE_NODE_ID: ${{ github.event.issue.node_id }}
          ISSUE_BODY: ${{ github.event.issue.body }}
          ISSUE_LABELS_JSON: ${{ toJson(github.event.issue.labels) }}
        run: |
          python - <<'PY'
          import os, re, json, logging, requests, sys
          logging.basicConfig(level="INFO", format="%(asctime)s %(levelname)s %(message)s")
          
          GQL = "https://api.github.com/graphql"
          token = os.environ.get("GITHUB_TOKEN")
          if not token:
            logging.error("GITHUB_TOKEN (GH_TOKEN_FOR_PROJECTS) is not set. Exiting.")
            raise SystemExit(1)
          org_login = os.environ.get("ORG_LOGIN")
          project_num = int(os.environ.get("PROJECT_NUMBER") or 0)
          issue_node_id = os.environ.get("ISSUE_NODE_ID")
          issue_body = os.environ.get("ISSUE_BODY") or ""
          labels = [l.get("name","") for l in json.loads(os.environ.get("ISSUE_LABELS_JSON") or "[]")]
          # Detect project owner type explicitly via env, or auto-fallback.
          owner_login = os.environ.get("OWNER_LOGIN") or org_login  # keep backwards-compat
          owner_kind = os.environ.get("OWNER_KIND", "user")  # "user" or "organization"
          
          s = requests.Session()
          s.headers.update({"Authorization": f"Bearer {token}", "Accept":"application/vnd.github+json"})
          
          def gql(query, variables, op=None):
            payload = {"query": query, "variables": variables}
            if op: payload["operationName"] = op
            r = s.post(GQL, json=payload, timeout=30)
            if r.status_code == 401: raise SystemExit("Unauthorised token")
            r.raise_for_status()
            data = r.json()
            if "errors" in data:
              raise SystemExit(f"GraphQL errors: {data['errors']}")
            return data["data"]
          
          def get_project_id(kind: str, login: str, number: int) -> str:
            if kind == "organization":
              q = 'query($login:String!, $num:Int!){ organization(login:$login){ projectV2(number:$num){ id }}}'
              path = ["organization", "projectV2"]
            else:
              q = 'query($login:String!, $num:Int!){ user(login:$login){ projectV2(number:$num){ id }}}'
              path = ["user", "projectV2"]
            d = gql(q, {"login": login, "num": number})
            node = d.get(path[0], {}).get(path[1])
            if not node:
              raise SystemExit(f"Project not found for {kind} '{login}' number {number}")
            return node["id"]
          
          # Validate issue node id
          if not issue_node_id:
            logging.error("ISSUE_NODE_ID is not present in the workflow context. This workflow expects an issue event context.")
            raise SystemExit(1)
          
          # 1) Resolve project id
          project_id = get_project_id(owner_kind, owner_login, project_num)
          
          # 2) Ensure item exists in project (idempotent)
          q_add = """mutation M($p:ID!,$c:ID!){ addProjectV2ItemById(input:{projectId:$p,contentId:$c}){ item{ id } } }"""
          item_id = gql(q_add, {"p": project_id, "c": issue_node_id})["addProjectV2ItemById"]["item"]["id"]
          logging.info("Project item id: %s", item_id)
          
          # 3) Cache fields (with detailed logging)
          fields_by_name = {}
          after = None
          q_fields = """
          query F($id:ID!, $after:String) {
            node(id:$id) {
              ... on ProjectV2 {
                fields(first:50, after:$after) {
                  nodes {
                    __typename
                    ... on ProjectV2Field {
                      id
                      name
                      dataType
                    }
                    ... on ProjectV2SingleSelectField {
                      id
                      name
                      dataType
                      options { id name }
                    }
                    ... on ProjectV2IterationField {
                      id
                      name
                      dataType
                      configuration {
                        iterations { id title }
                      }
                    }
                  }
                  pageInfo { hasNextPage endCursor }
                }
              }
            }
          }
          """
          while True:
            data = gql(q_fields, {"id": project_id, "after": after}, op="F")
            fnode = data["node"]["fields"]
            for n in fnode["nodes"]:
              t = n.get("__typename")
              name = n.get("name")
              if not name:
                continue
              base = {
                "id": n.get("id"),
                "name": name,
                "dataType": n.get("dataType"),
                "__typename": t
              }
              if t == "ProjectV2SingleSelectField":
                base["options"] = {opt["name"]: opt["id"] for opt in (n.get("options") or [])}
              elif t == "ProjectV2IterationField":
                base["iterations"] = {it["title"]: it["id"] for it in (n.get("configuration", {}).get("iterations") or [])}
              fields_by_name[base["name"]] = base
            if fnode["pageInfo"]["hasNextPage"]:
              after = fnode["pageInfo"]["endCursor"]
            else:
              break
          
          logging.info("Loaded %d fields", len(fields_by_name))
          for k, v in sorted(fields_by_name.items()):
            logging.info("Field: %s -> id:%s dataType:%s __typename:%s options:%s", k, v.get("id"), v.get("dataType"), v.get("__typename"), ", ".join(v.get("options", {}).keys()) if v.get("options") else "")
          
          def is_number_field(f):
            # Accept either explicit NUMBER dataType, or base ProjectV2Field with dataType NUMBER
            return (f.get("dataType") == "NUMBER") or (f.get("__typename") == "ProjectV2Field" and f.get("dataType") == "NUMBER")
          
          def is_single_select_field(f):
            return (f.get("__typename") == "ProjectV2SingleSelectField") or (f.get("dataType") == "SINGLE_SELECT")
          
          def set_number(field_name: str, value: float):
            f = fields_by_name.get(field_name)
            if not f:
              logging.warning("Number field %s not found; skipping", field_name)
              return
            if not is_number_field(f):
              logging.warning("Field %s is not a NUMBER field (dataType=%s __typename=%s); skipping", field_name, f.get("dataType"), f.get("__typename"))
              return
            q = """mutation U($p:ID!,$i:ID!,$f:ID!,$v:Float!){
              updateProjectV2ItemFieldValue(input:{
                projectId:$p,itemId:$i,fieldId:$f,value:{number:$v}
              }){ projectV2Item { id } }
            }"""
            try:
              gql(q, {"p": project_id, "i": item_id, "f": f["id"], "v": float(value)})
              logging.info("Set number %s = %s", field_name, value)
            except Exception as e:
              logging.error("Failed to set number field %s: %s", field_name, e)
          
          def set_select(field_name: str, option_name: str):
            f = fields_by_name.get(field_name)
            if not f:
              logging.warning("Select field %s not found; skipping", field_name)
              return
            if not is_single_select_field(f):
              logging.warning("Field %s is not a SINGLE_SELECT field (dataType=%s __typename=%s); skipping", field_name, f.get("dataType"), f.get("__typename"))
              return
            opt_id = f.get("options", {}).get(option_name)
            if not opt_id:
              logging.warning("Option '%s' not found in %s; available: %s",
                              option_name, field_name, ", ".join(f.get("options", {}).keys()))
              return
            q = """mutation U($p:ID!,$i:ID!,$f:ID!,$o:String!){
              updateProjectV2ItemFieldValue(input:{
                projectId:$p,itemId:$i,fieldId:$f,value:{singleSelectOptionId:$o}
              }){ projectV2Item { id } }
            }"""
            try:
              gql(q, {"p": project_id, "i": item_id, "f": f["id"], "o": opt_id})
              logging.info("Set select %s -> %s", field_name, option_name)
            except Exception as e:
              logging.error("Failed to set select field %s to %s: %s", field_name, option_name, e)
          
          # 4) Parse Impact/Reach/Confidence/Effort from body frontmatter or labels like impact:8
          def extract_num(name):
            m = re.search(rf"(?im)^{name}\s*:\s*([0-9]+(?:\.[0-9]+)?)\b", issue_body)
            if m: return float(m.group(1))
            for lbl in labels:
              if lbl.lower().startswith(name.lower()+":"):
                try: return float(lbl.split(":",1)[1])
                except: pass
            return None
          
          Impact = extract_num("Impact") or 5.0
          Reach = extract_num("Reach") or 1.0
          Confidence = extract_num("Confidence") or 0.8
          Effort = extract_num("Effort") or 3.0
          RICE = (Reach * Impact * Confidence) / max(Effort, 0.5)
          
          set_number("Impact", Impact)
          set_number("Reach", Reach)
          set_number("Confidence", Confidence)
          set_number("Effort", Effort)
          set_number("RICE", RICE)
          
          # Optional default Status (only if Status is single-select)
          set_select("Status", "Inbox")
          logging.info("RICE=%.2f (Reach=%.1f Impact=%.1f Confidence=%.2f Effort=%.1f)", RICE, Reach, Impact, Confidence, Effort)
          PY
